


arr = [1, 2, 3]

max = fn (arr, isGreater = op >)
{
    var m
    arr.each
    {
        if it.isGreater(m)
            then m = a end
    }
    return m
}

MinvalueFn : Fn(Type(Any'A), Any'A)

MinMax = interface (Any'A)
{
    minValue : Any'A
    maxValue : Any'A
}

Ordered = interface (Any'A, Any'B)
{
    compare : Fn(Any'A, Any'B, CompareResult)
}

implicit OrderedInt = implements Ordred(Int, Int)
{
    compare = fn (a, b) { if a == b then 0 else if a < b then -1 else 1 end }
}

CompareResult = enum (Int)
{
    smaller = -1,
    equal = 0,
    larger = 1
}


max = fn (arr, isGreater = op >, minValue = implicit)
{
    m = arr.ItemType.minValue
    arr.each ( fn (a)
    {
        if a.isGreater(m)
            then m = a end
    })
    return m
}

max = fn (arr : Array[Any'A], isGreater : Fn(Any'A, Any'A) = op > )

max : Fn(Array[A], Fn(A, A), A)

max : Fn(Array[Any], Fn(Any, Any), Any)

max : Fn(Array[Any], Fn(Any, Any), Any)

max : Fn(Array[Any'A], Fn(Any'A, Any'A), Any'A)

    = fn (arr, isGreater = op > )
{
    var m : arr.ItemType
    arr.each
    {
        if it.isGreater(m)
            then m = a end
    }
    return m
}